#########
# RULES #
#########

.qa_build_ci_rule:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
    - when: never

.main_build_ci_rule:
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $SCHEDULED_TASK_NAME == "deploy_main_at_2_am"'
    - when: never

###########
# SCRIPTS #
###########

.check-version: &check-version
  - cat $CI_PROJECT_DIR/version

.create-docker-build-and-config-files: &create-docker-build-and-config-files
  - sed -i "s/NODEJS_PROJECT_VERSION/$(cat version)/g" appconfig/appconfig.local.ts
  - |
    cat << EOT > "$CI_PROJECT_DIR/.dockerignore"
    node_modules/
    dist/
    .git
    .gitignore
    EOT
  - |
    cat << EOT > "$CI_PROJECT_DIR/Dockerfile"
    FROM $DOCKER_IMAGE_NGINX_ALPINE AS base
    WORKDIR /usr/share/nginx/html
    RUN rm -rf ./*
    COPY default.conf /etc/nginx/conf.d/default.conf
    EXPOSE 80
    #
    FROM $DOCKER_IMAGE_NODE_LTS_ALPINE AS builder
    WORKDIR /src
    COPY package.json ./
    COPY .npmrc ./
    COPY .yarnrc ./
    RUN yarn install
    COPY . ./
    RUN yarn add -D webpack
    RUN yarn build
    #
    FROM base AS final
    WORKDIR /usr/share/nginx/html
    COPY --from=builder /src/dist .
    EOT

.login-to-docker-registry: &login-to-docker-registry
  - echo $REGISTRY_TOKEN | docker login -u $REGISTRY_LOGIN $DOCKER_REGISTRY_URL --password-stdin

.setup-npmrc-config-file: &setup-npmrc-config-file
  - |
    cat << EOT > "$CI_PROJECT_DIR/.npmrc"
    @npm:registry=https://$CI_SERVER_HOST/api/v4/projects/$PROJECT_ID_NPM_PROJECT/packages/npm/
    //$CI_SERVER_HOST/api/v4/projects/$PROJECT_ID_NPM_PROJECT/packages/npm/:_authToken=${CI_JOB_TOKEN}
    always-auth=true
    EOT

.main-build-push-delete-docker-image: &main-build-push-delete-docker-image
  - docker build . -t $DOCKER_REGISTRY_URL/$CI_PROJECT_PATH/$NODEJS_PROJECT_DOCKER_IMAGE_NAME:$(cat version)
  - docker push $CI_SERVER_HOST:5050/$CI_PROJECT_PATH/$NODEJS_PROJECT_DOCKER_IMAGE_NAME:$(cat version)
  - docker rmi $CI_SERVER_HOST:5050/$CI_PROJECT_PATH/$NODEJS_PROJECT_DOCKER_IMAGE_NAME:$(cat version)

.temp-build-push-delete-docker-image: &temp-build-push-delete-docker-image
  - docker build . -t $DOCKER_REGISTRY_URL/$CI_PROJECT_PATH/$NODEJS_PROJECT_DOCKER_IMAGE_NAME:latest
  - docker push $CI_SERVER_HOST:5050/$CI_PROJECT_PATH/$NODEJS_PROJECT_DOCKER_IMAGE_NAME:latest
  - docker rmi $CI_SERVER_HOST:5050/$CI_PROJECT_PATH/$NODEJS_PROJECT_DOCKER_IMAGE_NAME:latest

########
# JOBS #
########

building-nodejs-project-qa01:
  image: $DOCKER_IMAGE_DIND
  stage: build
  tags:
    - build
  needs:
    - job: version-for-nodejs-project-qa
      optional: true
  rules:
    - !reference [ .qa_build_ci_rule, rules ]
  artifacts:
    paths:
      - version
    expire_in: 12 weeks
  variables:
    NODEJS_PROJECT_DOCKER_IMAGE_NAME: "nodejs-project-qa01"
  script:
    - *check-version
    # create appconfig
    - cp $QA01_APPCONFIG appconfig/appconfig.local.ts
    - *create-docker-build-and-config-files
    - *login-to-docker-registry
    - *setup-npmrc-config-file
    - *main-build-push-delete-docker-image

building-nodejs-project-qa02:
  image: $DOCKER_IMAGE_DIND
  stage: build
  tags:
    - build
  needs:
    - job: version-for-nodejs-project-qa
      optional: true
  rules:
    - !reference [ .qa_build_ci_rule, rules ]
  artifacts:
    paths:
      - version
    expire_in: 12 weeks
  variables:
    NODEJS_PROJECT_DOCKER_IMAGE_NAME: "nodejs-project-qa02"
  script:
    - *check-version
    # create appconfig
    - cp $QA02_APPCONFIG appconfig/appconfig.local.ts
    - *create-docker-build-and-config-files
    - *login-to-docker-registry
    - *setup-npmrc-config-file
    - *main-build-push-delete-docker-image

building-nodejs-project-qa03:
  image: $DOCKER_IMAGE_DIND
  stage: build
  tags:
    - build
  needs:
    - job: version-for-nodejs-project-qa
      optional: true
  rules:
    - !reference [ .qa_build_ci_rule, rules ]
  artifacts:
    paths:
      - version
    expire_in: 12 weeks
  variables:
    NODEJS_PROJECT_DOCKER_IMAGE_NAME: "nodejs-project-qa03"
  script:
    - *check-version
    # create appconfig
    - cp $QA03_APPCONFIG appconfig/appconfig.local.ts
    - *create-docker-build-and-config-files
    - *login-to-docker-registry
    - *setup-npmrc-config-file
    - *main-build-push-delete-docker-image


building-nodejs-project-demo-server-server:
  image: $DOCKER_IMAGE_DIND
  stage: build
  tags:
    - build
  needs:
    - job: version-for-nodejs-project-main
      optional: true
  rules:
    - !reference [ .main_build_ci_rule, rules ]
  artifacts:
    paths:
      - version
    expire_in: 12 weeks
  variables:
    NODEJS_PROJECT_DOCKER_IMAGE_NAME: "nodejs-project-demo-server"
  script:
    - *check-version
    # create appconfig
    - cp $DEMO_SERVER_APPCONFIG appconfig/appconfig.local.ts
    - *create-docker-build-and-config-files
    - *login-to-docker-registry
    - *setup-npmrc-config-file
    - *main-build-push-delete-docker-image

building-nodejs-project-trial-server:
  image: $DOCKER_IMAGE_DIND
  stage: build
  tags:
    - build
  needs:
    - job: version-for-nodejs-project-main
      optional: true
  rules:
    - !reference [ .main_build_ci_rule, rules ]
  artifacts:
    paths:
      - version
    expire_in: 12 weeks
  variables:
    NODEJS_PROJECT_DOCKER_IMAGE_NAME: "nodejs-project-trial-server"
  script:
    - *check-version
    # create appconfig
    - cp $TRIAL_SERVER_APPCONFIG appconfig/appconfig.local.ts
    - *create-docker-build-and-config-files
    - *login-to-docker-registry
    - *setup-npmrc-config-file
    - *main-build-push-delete-docker-image

building-nodejs-project-production-server:
  image: $DOCKER_IMAGE_DIND
  stage: build
  tags:
    - build
  needs:
    - job: version-for-nodejs-project-main
      optional: true
  rules:
    - !reference [ .main_build_ci_rule, rules ]
  artifacts:
    paths:
      - version
    expire_in: 12 weeks
  variables:
    NODEJS_PROJECT_DOCKER_IMAGE_NAME: "nodejs-project-production-server"
  script:
    - *check-version
    # create appconfig
    - cp $PRODUCTION_SERVER_APPCONFIG appconfig/appconfig.local.ts
    - *create-docker-build-and-config-files
    - *login-to-docker-registry
    - *setup-npmrc-config-file
    - *main-build-push-delete-docker-image

building-nodejs-project-development-server:
  image: $DOCKER_IMAGE_DIND
  stage: build
  tags:
    - build
  needs:
    - job: version-for-nodejs-project-main
      optional: true
  rules:
    - !reference [ .main_build_ci_rule, rules ]
  artifacts:
    paths:
      - version
    expire_in: 12 weeks
  variables:
    NODEJS_PROJECT_DOCKER_IMAGE_NAME: "nodejs-project-development-server"
  script:
    - *check-version
    # create appconfig
    - cp $DEVELOPMENT_SERVER_APPCONFIG appconfig/appconfig.local.ts
    - *create-docker-build-and-config-files
    - *login-to-docker-registry
    - *setup-npmrc-config-file
    - *main-build-push-delete-docker-image

building-nodejs-project-qa-temporary-server:
  image: $DOCKER_IMAGE_DIND
  stage: build
  tags:
    - build
  needs:
    - job: version-for-nodejs-project-qa
      optional: true
  rules:
    - !reference [ .qa_build_ci_rule, rules ]
  artifacts:
    paths:
      - version
    expire_in: 12 weeks
  variables:
    NODEJS_PROJECT_DOCKER_IMAGE_NAME: "nodejs-project-qa-temporary-server"
  script:
    - *check-version
    # create appconfig
    - cp $TEMPORARY_SERVER_APPCONFIG appconfig/appconfig.local.ts
    - *create-docker-build-and-config-files
    - *login-to-docker-registry
    - *setup-npmrc-config-file
    - *main-build-push-delete-docker-image

building-nodejs-project-main-temporary-server:
  image: $DOCKER_IMAGE_DIND
  stage: build
  tags:
    - build
  needs:
    - job: version-for-nodejs-project-main
      optional: true
  rules:
    - !reference [ .main_build_ci_rule, rules ]
  artifacts:
    paths:
      - version
    expire_in: 12 weeks
  variables:
    NODEJS_PROJECT_DOCKER_IMAGE_NAME: "nodejs-project-main-temporary-server"
  script:
    - *check-version
    # create appconfig
    - cp $TEMPORARY_SERVER_APPCONFIG appconfig/appconfig.local.ts
    - *create-docker-build-and-config-files
    - *login-to-docker-registry
    - *setup-npmrc-config-file
    - *temp-build-push-delete-docker-image