#########
# RULES #
#########

.qa_deploy_ci_rule:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
      when: manual
    - when: never

.qa_restore_ci_rule:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
      when: manual
    - when: never

.main_deploy_ci_rule:
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $SCHEDULED_TASK_NAME == "deploy_main_at_2_am"'
    - when: never

###########
# SCRIPTS #
###########

.check-version: &check-version
  - cat version

.prepare-ssh-client-for-connecting-to-the-server: &prepare-ssh-client-for-connecting-to-the-server
  - mkdir -p $HOME/.ssh; chmod 700 $HOME/.ssh; echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > $HOME/.ssh/config; echo "$APPLICATION_SERVER_ID_RSA" > $HOME/.ssh/id_rsa; chmod 600 $HOME/.ssh/id_rsa

.add-new-version-of-application-server-docker-image-env-file: &add-new-version-of-application-server-docker-image-env-file
  - echo "IMAGE_VERSION=$(cat version)" >> .env

.delete-the-old-application-server-service-and-create-a-new-one: &delete-the-old-application-server-service-and-create-a-new-one
  - scp -P $APPLICATION_SERVER_SSH_PORT -r remove-old-application-server-docker-images.sh $APPLICATION_SERVER_SSH_LOGIN@$APPLICATION_SERVER_HOSTNAME:$DOTNET_PROJECT_FOLDER
  - ssh $APPLICATION_SERVER_SSH_LOGIN@$APPLICATION_SERVER_HOSTNAME -p $APPLICATION_SERVER_SSH_PORT "bash $DOTNET_PROJECT_FOLDER/remove-old-application-server-docker-images.sh; exit"
  - ssh $APPLICATION_SERVER_SSH_LOGIN@$APPLICATION_SERVER_HOSTNAME -p $APPLICATION_SERVER_SSH_PORT "rm -rvf $DOTNET_PROJECT_FOLDER; mkdir -pv $DOTNET_PROJECT_FOLDER; exit"

.copying-pre-prepared-config-files-to-the-application-server: &copying-pre-prepared-config-files-to-the-application-server
  - scp -P $APPLICATION_SERVER_SSH_PORT -r docker-compose.yml .env version $APPLICATION_SERVER_SSH_LOGIN@$APPLICATION_SERVER_HOSTNAME:$DOTNET_PROJECT_FOLDER

.docker-compose-up-application-server-service: &docker-compose-up-application-server-service
  - ssh $APPLICATION_SERVER_SSH_LOGIN@$APPLICATION_SERVER_HOSTNAME -p $APPLICATION_SERVER_SSH_PORT "echo $REGISTRY_TOKEN | docker login -u $REGISTRY_LOGIN $DOCKER_REGISTRY_URL --password-stdin"
  - ssh $APPLICATION_SERVER_SSH_LOGIN@$APPLICATION_SERVER_HOSTNAME -p $APPLICATION_SERVER_SSH_PORT "cd $DOTNET_PROJECT_FOLDER; docker-compose --compatibility up -d"

.restore-dotnet-database-from-backup: &restore-dotnet-database-from-backup
  - scp -P $APPLICATION_SERVER_SSH_PORT -r restore-qa-database-script.sh $APPLICATION_SERVER_SSH_LOGIN@$APPLICATION_SERVER_HOSTNAME:$DOTNET_PROJECT_FOLDER
  - ssh $APPLICATION_SERVER_SSH_LOGIN@$APPLICATION_SERVER_HOSTNAME -p $APPLICATION_SERVER_SSH_PORT "bash $DOTNET_PROJECT_FOLDER/restore-qa-database-script.sh; exit"
  - ssh $APPLICATION_SERVER_SSH_LOGIN@$APPLICATION_SERVER_HOSTNAME -p $APPLICATION_SERVER_SSH_PORT "rm -rf $DOTNET_PROJECT_FOLDER/restore-qa-database-script.sh; exit"

########
# JOBS #
########

QA01:
  image: $DOCKER_IMAGE_SSH_CLIENT
  stage: "deploy to"
  tags:
    - deploy
  needs:
    - job: building-dotnet-qa
      optional: false
  rules:
    - !reference [ .qa_deploy_ci_rule, rules ]
  artifacts:
    paths:
      - version
    expire_in: 12 weeks
  variables:
    APPLICATION_SERVER_HOSTNAME: "application-server.company.com"
    DOTNET_PROJECT_FOLDER: "/opt/dotnet/dotnet-qa01"
    DOTNET_PROJECT_DOCKER_IMAGE_NAME: "dotnet-qa01"
    APPLICATION_SERVER_ID_RSA: "$CI_USER_ID_RSA"
    APPLICATION_SERVER_SSH_LOGIN: "$SSH_LOGIN"
    APPLICATION_SERVER_SSH_PORT: "22"
  script:
    - *check-version
    - *prepare-ssh-client-for-connecting-to-the-server
    # create docker-compose file
    - cp $QA01_COMPOSE docker-compose.yml
    # create variables
    - cp $QA01_ENV .env
    - *add-new-version-of-application-server-docker-image-env-file
    # create docker rmi script
    - cp $QA_RMI remove-old-application-server-docker-images.sh
    - *delete-the-old-application-server-service-and-create-a-new-one
    - *copying-pre-prepared-config-files-to-the-application-server
    - *docker-compose-up-application-server-service

QA02:
  image: $DOCKER_IMAGE_SSH_CLIENT
  stage: "deploy to"
  tags:
    - deploy
  needs:
    - job: building-dotnet-qa
      optional: false
  rules:
    - !reference [ .qa_deploy_ci_rule, rules ]
  artifacts:
    paths:
      - version
    expire_in: 12 weeks
  variables:
    APPLICATION_SERVER_HOSTNAME: "application-server.company.com"
    DOTNET_PROJECT_FOLDER: "/opt/dotnet/dotnet-qa02"
    DOTNET_PROJECT_DOCKER_IMAGE_NAME: "dotnet-qa02"
    APPLICATION_SERVER_ID_RSA: "$CI_USER_ID_RSA"
    APPLICATION_SERVER_SSH_LOGIN: "$SSH_LOGIN"
    APPLICATION_SERVER_SSH_PORT: "22"
  script:
    - *check-version
    - *prepare-ssh-client-for-connecting-to-the-server
    # create docker-compose file
    - cp $QA02_COMPOSE docker-compose.yml
    # create variables
    - cp $QA02_ENV .env
    - *add-new-version-of-application-server-docker-image-env-file
    # create docker rmi script
    - cp $QA_RMI remove-old-application-server-docker-images.sh
    - *delete-the-old-application-server-service-and-create-a-new-one
    - *copying-pre-prepared-config-files-to-the-application-server
    - *docker-compose-up-application-server-service

QA03:
  image: $DOCKER_IMAGE_SSH_CLIENT
  stage: "deploy to"
  tags:
    - deploy
  needs:
    - job: building-dotnet-qa
      optional: false
  rules:
    - !reference [ .qa_deploy_ci_rule, rules ]
  artifacts:
    paths:
      - version
    expire_in: 12 weeks
  variables:
    APPLICATION_SERVER_HOSTNAME: "application-server.company.com"
    DOTNET_PROJECT_FOLDER: "/opt/dotnet/dotnet-qa03"
    DOTNET_PROJECT_DOCKER_IMAGE_NAME: "dotnet-qa03"
    APPLICATION_SERVER_ID_RSA: "$CI_USER_ID_RSA"
    APPLICATION_SERVER_SSH_LOGIN: "$SSH_LOGIN"
    APPLICATION_SERVER_SSH_PORT: "22"
  script:
    - *check-version
    - *prepare-ssh-client-for-connecting-to-the-server
    # create docker-compose file
    - cp $QA03_COMPOSE docker-compose.yml
    # create variables
    - cp $QA03_ENV .env
    - *add-new-version-of-application-server-docker-image-env-file
    # create docker rmi script
    - cp $QA_RMI remove-old-application-server-docker-images.sh
    - *delete-the-old-application-server-service-and-create-a-new-one
    - *copying-pre-prepared-config-files-to-the-application-server
    - *docker-compose-up-application-server-service

restore-database-dotnet-qa01:
  image: $DOCKER_IMAGE_SSH_CLIENT
  stage: "restore"
  tags:
    - restore
  needs:
    - job: QA01
      optional: false
  rules:
    - !reference [ .qa_restore_ci_rule, rules ]
  variables:
    APPLICATION_SERVER_HOSTNAME: "application-server.company.com"
    DOTNET_PROJECT_FOLDER: "/opt/dotnet/dotnet-qa01"
    APPLICATION_SERVER_ID_RSA: "$CI_USER_ID_RSA"
    APPLICATION_SERVER_SSH_LOGIN: "$SSH_LOGIN"
    APPLICATION_SERVER_SSH_PORT: "22"
  script:
    - *prepare-ssh-client-for-connecting-to-the-server
    - cp $QA01_RESTORE_DB restore-qa-database-script.sh
    - *restore-dotnet-database-from-backup

restore-database-dotnet-qa02:
  image: $DOCKER_IMAGE_SSH_CLIENT
  stage: "restore"
  tags:
    - restore
  needs:
    - job: QA02
      optional: false
  rules:
    - !reference [ .qa_restore_ci_rule, rules ]
  variables:
    APPLICATION_SERVER_HOSTNAME: "application-server.company.com"
    DOTNET_PROJECT_FOLDER: "/opt/dotnet/dotnet-qa02"
    APPLICATION_SERVER_ID_RSA: "$CI_USER_ID_RSA"
    APPLICATION_SERVER_SSH_LOGIN: "$SSH_LOGIN"
    APPLICATION_SERVER_SSH_PORT: "22"
  script:
    - *prepare-ssh-client-for-connecting-to-the-server
    - cp $QA02_RESTORE_DB restore-qa-database-script.sh
    - *restore-dotnet-database-from-backup

restore-database-dotnet-qa03:
  image: $DOCKER_IMAGE_SSH_CLIENT
  stage: "restore"
  tags:
    - restore
  needs:
    - job: QA03
      optional: false
  rules:
    - !reference [ .qa_restore_ci_rule, rules ]
  variables:
    APPLICATION_SERVER_HOSTNAME: "application-server.company.com"
    DOTNET_PROJECT_FOLDER: "/opt/dotnet/dotnet-qa03"
    APPLICATION_SERVER_ID_RSA: "$CI_USER_ID_RSA"
    APPLICATION_SERVER_SSH_LOGIN: "$SSH_LOGIN"
    APPLICATION_SERVER_SSH_PORT: "22"
  script:
    - *prepare-ssh-client-for-connecting-to-the-server
    - cp $QA03_RESTORE_DB restore-qa-database-script.sh
    - *restore-dotnet-database-from-backup

Demo:
  image: $DOCKER_IMAGE_SSH_CLIENT
  stage: "deploy to"
  tags:
    - deploy
  needs:
    - job: building-dotnet-main
      optional: false
  rules:
    - !reference [ .main_deploy_ci_rule, rules ]
  artifacts:
    paths:
      - version
    expire_in: 12 weeks
  variables:
    APPLICATION_SERVER_HOSTNAME: "demo-server.company.com"
    DOTNET_PROJECT_FOLDER: "/opt/dotnet/dotnet-production-server"
    DOTNET_PROJECT_DOCKER_IMAGE_NAME: "dotnet-production-server"
    APPLICATION_SERVER_ID_RSA: "$CI_USER_ID_RSA"
    APPLICATION_SERVER_SSH_LOGIN: "$SSH_LOGIN"
    APPLICATION_SERVER_SSH_PORT: "22"
  script:
    - *check-version
    - *prepare-ssh-client-for-connecting-to-the-server
    # create docker-compose file
    - cp $DEMO_SERVER_COMPOSE docker-compose.yml
    # create variables
    - cp $DEMO_SERVER_ENV .env
    - *add-new-version-of-application-server-docker-image-env-file
    # create docker rmi script
    - cp $PRODUCTION_SERVER_RMI remove-old-application-server-docker-images.sh
    - *delete-the-old-application-server-service-and-create-a-new-one
    - *copying-pre-prepared-config-files-to-the-application-server
    - *docker-compose-up-application-server-service

Trial:
  image: $DOCKER_IMAGE_SSH_CLIENT
  stage: "deploy to"
  tags:
    - deploy
  needs:
    - job: building-dotnet-main
      optional: false
  rules:
    - !reference [ .main_deploy_ci_rule, rules ]
  artifacts:
    paths:
      - version
    expire_in: 12 weeks
  variables:
    APPLICATION_SERVER_HOSTNAME: "trial-server.company.com"
    DOTNET_PROJECT_FOLDER: "/opt/dotnet/dotnet-production-server"
    DOTNET_PROJECT_DOCKER_IMAGE_NAME: "dotnet-production-server"
    APPLICATION_SERVER_ID_RSA: "$CI_USER_ID_RSA"
    APPLICATION_SERVER_SSH_LOGIN: "$SSH_LOGIN"
    APPLICATION_SERVER_SSH_PORT: "22"
  script:
    - *check-version
    - *prepare-ssh-client-for-connecting-to-the-server
    # create docker-compose file
    - cp $TRIAL_SERVER_COMPOSE docker-compose.yml
    # create variables
    - cp $TRIAL_SERVER_ENV .env
    - *add-new-version-of-application-server-docker-image-env-file
    # create docker rmi script
    - cp $PRODUCTION_SERVER_RMI remove-old-application-server-docker-images.sh
    - *delete-the-old-application-server-service-and-create-a-new-one
    - *copying-pre-prepared-config-files-to-the-application-server
    - *docker-compose-up-application-server-service

Production:
  image: $DOCKER_IMAGE_SSH_CLIENT
  stage: "deploy to"
  tags:
    - deploy
  needs:
    - job: building-dotnet-main
      optional: false
  rules:
    - !reference [ .main_deploy_ci_rule, rules ]
  artifacts:
    paths:
      - version
    expire_in: 12 weeks
  variables:
    APPLICATION_SERVER_HOSTNAME: "production.company.com"
    DOTNET_PROJECT_FOLDER: "/opt/dotnet/dotnet-production-server"
    DOTNET_PROJECT_DOCKER_IMAGE_NAME: "dotnet-production-server"
    APPLICATION_SERVER_ID_RSA: "$CI_USER_ID_RSA"
    APPLICATION_SERVER_SSH_LOGIN: "$SSH_LOGIN"
    APPLICATION_SERVER_SSH_PORT: "22"
  script:
    - *check-version
    - *prepare-ssh-client-for-connecting-to-the-server
    # create docker-compose file
    - cp $PRODUCTION_SERVER_COMPOSE docker-compose.yml
    # create variables
    - cp $PRODUCTION_SERVER_ENV .env
    - *add-new-version-of-application-server-docker-image-env-file
    # create docker rmi script
    - cp $PRODUCTION_SERVER_RMI remove-old-application-server-docker-images.sh
    - *delete-the-old-application-server-service-and-create-a-new-one
    - *copying-pre-prepared-config-files-to-the-application-server
    - *docker-compose-up-application-server-service

Development:
  image: $DOCKER_IMAGE_SSH_CLIENT
  stage: "deploy to"
  tags:
    - deploy
  needs:
    - job: building-dotnet-main
      optional: false
  rules:
    - !reference [ .main_deploy_ci_rule, rules ]
  artifacts:
    paths:
      - version
    expire_in: 12 weeks
  variables:
    APPLICATION_SERVER_HOSTNAME: "application-server.company.com"
    DOTNET_PROJECT_FOLDER: "/opt/dotnet/dotnet-development-server"
    DOTNET_PROJECT_DOCKER_IMAGE_NAME: "dotnet-production-server"
    APPLICATION_SERVER_ID_RSA: "$CI_USER_ID_RSA"
    APPLICATION_SERVER_SSH_LOGIN: "$SSH_LOGIN"
    APPLICATION_SERVER_SSH_PORT: "22"
  script:
    - *check-version
    - *prepare-ssh-client-for-connecting-to-the-server
    # create docker-compose file
    - cp $DEVELOPMENT_SERVER_COMPOSE docker-compose.yml
    # create variables
    - cp $DEVELOPMENT_SERVER_ENV .env
    - *add-new-version-of-application-server-docker-image-env-file
    # create docker rmi script
    - cp $DEVELOPMENT_SERVER_RMI remove-old-application-server-docker-images.sh
    - *delete-the-old-application-server-service-and-create-a-new-one
    - *copying-pre-prepared-config-files-to-the-application-server
    - *docker-compose-up-application-server-service